trigger: none

resources:
- repo: self

variables:

  # Container registry service connection
  dockerRegistryServiceConnection: 'a808765f-caee-4ae6-957c-237e4cb84861'
  frontend-imageRepository: 'frontend'
  backend-imageRepository: 'backend'
  containerRegistry: 'akslabacr1204.azurecr.io'
  frontend-dockerfilePath: '**/frontend/Dockerfile'
  backend-dockerfilePath: '**/backend/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'akslabacr1204ee49-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build frontend and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(frontend-imageRepository)
        dockerfile: $(frontend-dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build backend and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(backend-imageRepository)
        dockerfile: $(backend-dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - publish: helm
      artifact: helm

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'app2aksdockerfile.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: HelmInstaller@1
            displayName: Install Helm
            inputs:
              helmVersionToInstall: 'latest'

          - script: |
              helm upgrade --install myapp $(Pipeline.Workspace)/helm/myapp \
                --namespace default \
                --set image.frontendTag=frontend:$(tag) \
                --set image.backendTag=backend:$(tag)
            displayName: Deploy Helm Chart to AKS

# # Deploy to Azure Kubernetes Service
# # Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# # https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger: none

# resources:
# - repo: self

# variables:

#   # Container registry service connection established during pipeline creation
#   dockerRegistryServiceConnection: 'a808765f-caee-4ae6-957c-237e4cb84861'
#   frontend-imageRepository: 'frontend'
#   backend-imageRepository: 'backend'
#   containerRegistry: 'akslabacr1204.azurecr.io'
#   frontend-dockerfilePath: '**/frontend/Dockerfile'
#   backend-dockerfilePath: '**/backend/Dockerfile'
#   tag: '$(Build.BuildId)'
#   imagePullSecret: 'akslabacr1204ee49-auth'

#   # Agent VM image name
#   vmImageName: 'ubuntu-latest'

# stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: Docker@2
#       displayName: Build frontend and push an image to container registry
#       inputs:
#         command: buildAndPush
#         repository: $(frontend-imageRepository)
#         dockerfile: $(frontend-dockerfilePath)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         tags: |
#           $(tag)
#     - task: Docker@2
#       displayName: Build backend and push an image to container registry
#       inputs:
#         command: buildAndPush
#         repository: $(backend-imageRepository)
#         dockerfile: $(backend-dockerfilePath)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         tags: |
#           $(tag)

#     - publish: manifests
#       artifact: manifests

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'app2aksdockerfile.default'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/frontend-deployment.yml
#                 $(Pipeline.Workspace)/manifests/backend-deployment.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(frontend-imageRepository):$(tag)
#                 $(containerRegistry)/$(backend-imageRepository):$(tag)
          
#           - task: KubernetesManifest@0
#             displayName: Deploy Ingress
#             inputs:
#               action: deploy
#               namespace: default
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/ingress.yml